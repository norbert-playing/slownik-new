// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// model User {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String ?  @unique
//   emailVerified DateTime? @map(name: "email_verified")
//   image         String?
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @default(now()) @map(name: "updated_at")
//   slowka         slownik[]
//   sessions      Session[]
//   accounts      Account[]
//   @@map(name: "users")
// }



// model Account {
//    id String @id @default(auto()) @map("_id") @db.ObjectId
//   // compoundId         String    @unique @map(name: "compound_id")
//   userId             String       @map(name: "user_id") @db.ObjectId
//   providerType       String    @map(name: "provider_type")
//   providerId         String    @map(name: "provider_id")
//   providerAccountId  String    @map(name: "provider_account_id")
//   refreshToken       String?   @map(name: "refresh_token")
//   accessToken        String?   @map(name: "access_token")
//   accessTokenExpires DateTime? @map(name: "access_token_expires")
//   createdAt          DateTime  @default(now()) @map(name: "created_at")
//   updatedAt          DateTime  @default(now()) @map(name: "updated_at")
  
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([providerAccountId], name: "providerAccountId")
//   @@index([providerId], name: "providerId")
//   @@index([userId], name: "userId")

//   @@map(name: "accounts")
// }

// model Session {
//    id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String      @map(name: "user_id") @db.ObjectId
//   expires      DateTime
//   sessionToken String   @unique @map(name: "session_token")
//   accessToken  String   @unique @map(name: "access_token")
//   createdAt    DateTime @default(now()) @map(name: "created_at")
//   updatedAt    DateTime @default(now()) @map(name: "updated_at")
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map(name: "sessions")
// }


// model VerificationRequest {
//    id String @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime  @default(now()) @map(name: "created_at")
//   updatedAt  DateTime  @default(now()) @map(name: "updated_at")

//   @@map(name: "verification_requests")
// }
// nnowe
model slownik {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  po_angielsku String @unique
  po_polsku String
  createdAt DateTime? @default(now())
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
}
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String 
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  slownik       slownik[]
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
